+STARTUP: overview
* Interface Tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t) 
  (blink-cursor-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-display-line-numbers-mode)
  (setq org-hide-emphasis-markers t)
  ;(setq display-line-numbers-type 'relative)
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
    :ensure t
    :config
	(dashboard-setup-startup-hook)
	(setq dashboard-startup-banner "~/.emacs.d/img/avatar.png") ;;        (setq dashboard-items '((recents  . 5)
;;	(projects . 5)))
        (setq dashboard-banner-logo-title "A dude with a laptop running Arch"))
#+END_SRC

* Font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
         '(font . "JetBrains Mono-10"))
#+END_SRC

* Syntax(flycheck)
#+BEGIN_SRC emacs-lisp
(use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC
	 
* Which Key
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
   :ensure t
       :init
   (which-key-mode))
 #+END_SRC

* Theme
 #+BEGIN_SRC emacs-lisp
(use-package doom-themes
:ensure t
:config
(load-theme 'doom-acario-dark t))
(use-package doom-modeline
:ensure t
:config
(doom-modeline-mode 1))
(use-package atom-one-dark-theme
:ensure t)

      ;    (use-package vscode-dark-plus-theme
      ;     :ensure t
      ;     :config
      ;     (load-theme 'vscode-dark-plus t))
 #+END_SRC

* use package
  Helps to load packages faster
#+BEGIN_SRC emacs-lisp  
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp  
(use-package try
  :ensure t)
#+END_SRC

* org bullet
  Better look in org mode
#+BEGIN_SRC emacs-lisp  
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package org-superstar
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

  (use-package writeroom-mode
    :ensure t)
#+END_SRC

* ido mode
#+BEGIN_SRC emacs-lisp  
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(defalias 'list-buffers 'ibuffer-other-window)
#+END_SRC

* ace window
  Better navigation theough window
#+BEGIN_SRC emacs-lisp  
  ;; ace window
  (use-package ace-window
    :ensure t
    :init
    (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))
#+END_SRC

* swiper
  Searching in more efficient way in emacs.
#+BEGIN_SRC emacs-lisp  
  (use-package counsel
    :ensure t
     :bind
      (("M-y" . counsel-yank-pop )
      :map ivy-minibuffer-map
      ("M-y" . ivy-next-line)))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
	   ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC
* avy
  It's like vim easy-motion
#+BEGIN_SRC emacs-lisp  
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

* auto-complete
  auto complete in emacs.
#+BEGIN_SRC emacs-lisp  
;   (use-package auto-complete
;     :ensure t
;     :init
;     (progn
;       (ac-config-default)
;      (global-auto-complete-mode t)
;       ))
#+END_SRC

* reveal.js
  
#+BEGIN_SRC emacs-lisp
   (use-package ox-reveal
   :ensure ox-reveal)

   (setq org-reveal-root "http://cdn.jsdelivr.net/npm/reveal.js")
   (setq org-reveal-mathjax t)

   (use-package htmlize 
   :ensure t)
#+END_SRC

* Evil mode
  creates vi layer for emacs
#+BEGIN_SRC emacs-lisp
    (use-package evil
       :ensure t
       :config
       (evil-mode 1 ))
  (use-package evil-surround
  :ensure t
  :config
  (evil-surround-mode 1))
#+END_SRC

* Emmet mode
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
     :ensure t
     :config
     (add-hook 'css-mode-hook  'emmet-mode)) ;; enable Emmet's css abbreviation.
#+END_SRC

* key-chord
  Reamping evil mode normal state to jk
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
  :ensure t
  :config
  (key-chord-mode 1)
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))
#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
  :ensure t
  :init
  (progn
  (yas-global-mode 1)))
#+END_SRC


* keep emacs clean
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

* Auto Save
#+BEGIN_SRC emacs-lisp
;; auto-save-mode doesn't create the path automatically!
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

(setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+END_SRC
# * Elcord
#   This package will connect with a local Discord client to update your status via the Discord Rich Presence API.
# #+BEGIN_SRC emacs-lisp
#   (use-package elcord
#   :ensure t
#   :config
#   (elcord-mode))
# #+END_SRC

* lsp mode
#+BEGIN_SRC emacs-lisp
;(defun efs/lsp-mode-setup ()
;  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
;  (lsp-headerline-breadcrumb-mode))
;  (use-package lsp-mode
;    :commands (lsp lsp-deferred)
;    :hook (lsp-mode . efs/lsp-mode-setup)
;    :init
;    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
;    :config
;    (lsp-enable-which-key-integration t))
#+END_SRC
* Company mode
#+BEGIN_SRC emacs-lisp
;       (use-package company
;       :after lsp-mode
;       :hook (lsp-mode . company-mode)
;       :bind (:map company-active-map
;	       ("<tab>" . company-complete-selection))
;	   (:map lsp-mode-map
;	       ("<tab>" . company-indent-or-complete-common)))
       ;; (use-package company-box
       ;;     :hook (company-mode . company-box-mode))
(electric-pair-mode 1)
#+END_SRC

* Html Live mode
#+BEGIN_SRC emacs-lisp
(use-package impatient-mode
    :ensure t)
#+END_SRC

* Multiple Cursor
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
  :ensure t)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
#+END_SRC

* PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
:ensure t)
#+END_SRC

* Terminal
#+BEGIN_SRC emacs-lisp
(use-package vterm
:ensure t)
#+END_SRC

* Python
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :config
  (elpy-enable))
      ;(use-package jedi
      ;    :ensure t
      ;    :init
      ;    (add-hook 'python-mood-hook 'jedi:setup
      ;    (add-hook 'python-mode-hook 'jedi-ac-setup)))
;;; Shut up compile saves
(setq compilation-ask-about-save nil)
#+END_SRC
* Prettier

#+BEGIN_SRC emacs-lisp
  (use-package prettier
  :ensure t)
#+END_SRC
